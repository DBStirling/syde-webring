name: Manual Add Node

on:
  workflow_dispatch:
    inputs:
      fullName:
        description: 'Full name'
        required: true
      year:
        description: 'Year (YYYY)'
        required: true
      website:
        description: 'Website URL'
        required: true
      skill1:
        description: 'Primary skill'
        required: true
        type: choice
        options: &skills
          - UX/UI
          - UXR
          - Graphic
          - Brand
          - Frontend
          - Backend
          - Full Stack
          - AI/ML
          - Quant
          - QA
          - Game Dev
          - SRE
          - Product
          - Project
          - Program
          - CAD/Simulation
          - Manufacturing
          - Materials
          - Automotive
          - Aero
          - Embedded
          - Signals
          - Sensors
          - Robotics
          - Power Systems
          - Communications
          - Data
          - Business
          - VC
          - IDK Yet!
          - Other
      skill2:
        description: 'Secondary skill'
        required: true
        type: choice
        options: *skills
      skill3:
        description: 'Tertiary skill'
        required: true
        type: choice
        options: *skills
      bio:
        description: 'Bio (optional)'
        required: false

jobs:
  add-node:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup git
        run: |
          git config --global user.name "webring-bot"
          git config --global user.email "webring-bot@users.noreply.github.com"

      - name: Create branch
        id: create_branch
        run: |
          FULL_NAME="${{ github.event.inputs.fullName }}"
          # slugify: lowercase, non-alnum -> '-', trim leading/trailing '-'
          SLUG=$(printf "%s" "$FULL_NAME" | tr '[:upper:]' '[:lower:]' | sed -E 's/[^a-z0-9]+/-/g; s/^-+|-+$//g')
          BRANCH_NAME="add/${SLUG}-${{ github.run_id }}"
          echo "BRANCH_NAME=$BRANCH_NAME" >> "$GITHUB_ENV"
          git checkout -b "$BRANCH_NAME"

      - name: Validate data file exists
        run: |
          if [ ! -f public/data.json ]; then
            echo "Data file not found at public/data.json"
            exit 1
          fi

      - name: Append node to public/data.json
        id: append
        run: |
          set -euo pipefail

          FULL_NAME="${{ github.event.inputs.fullName }}"
          YEAR="${{ github.event.inputs.year }}"
          WEBSITE="${{ github.event.inputs.website }}"
          SKILL1="${{ github.event.inputs.skill1 }}"
          SKILL2="${{ github.event.inputs.skill2 }}"
          SKILL3="${{ github.event.inputs.skill3 }}"
          BIO="${{ github.event.inputs.bio }}"

          # Compute next id = max(tonumber(id)) + 1 (handles string ids too)
          NEXT_ID="$(jq -r '([.nodes[].id | tonumber] | (max? // 0)) + 1' public/data.json)"

          # Optional: sanity-check values
          case "$NEXT_ID" in (''|*[!0-9]*) echo "Bad NEXT_ID: $NEXT_ID"; exit 1;; esac
          # If YEAR must be numeric, enforce it; otherwise, coerce inside jq with try/catch
          if ! printf '%s' "$YEAR" | grep -Eq '^[0-9]{4}$'; then
            echo "Warning: YEAR \"$YEAR\" is not a 4-digit number; will set year=null in JSON."
          fi

          # Build new node JSON (pass all args as strings; cast inside jq)
          NEW_NODE="$(jq -n \
            --arg id "$NEXT_ID" \
            --arg fullName "$FULL_NAME" \
            --arg year "$YEAR" \
            --arg website "$WEBSITE" \
            --arg skill1 "$SKILL1" \
            --arg skill2 "$SKILL2" \
            --arg skill3 "$SKILL3" \
            --arg bio "${BIO:-}" \
            '{
              id: ($id|tonumber),
              fullName: $fullName,
              year: (try ($year|tonumber) catch null),
              website: ($website|tostring),
              skills: { skill1: $skill1, skill2: $skill2, skill3: $skill3 },
              bio: $bio
            }'
          )"

          # Append to public/data.json
          TMP="$(mktemp)"
          jq --argjson newNode "$NEW_NODE" '.nodes += [$newNode]' public/data.json > "$TMP"
          mv "$TMP" public/data.json

          # Outputs for later steps
          {
            echo "new_node_json<<EOF"
            echo "$NEW_NODE"
            echo "EOF"
            echo "next_id=$NEXT_ID"
          } >> "$GITHUB_OUTPUT"

          # Debug (optional)
          jq -r '.nodes[-1]' public/data.json
      - name: Create Pull Request
        id: cpr
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          title: "Add ${{ github.event.inputs.fullName }} (${{ github.event.inputs.year }})"
          body: |
            Auto-generated from manual workflow_dispatch.

            **New node:**
            ```json
            ${{ steps.append.outputs.new_node_json }}
            ```
          base: main
          branch: ${{ env.BRANCH_NAME }}  # <-- use 'branch', not 'head'
